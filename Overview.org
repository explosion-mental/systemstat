* CPU load
| FreeBSD | Linux | OpenBSD | Window | MacOS | NetBSD |
|---------+-------+---------+--------+-------+--------|
| ❌      | ❌    | ❌      | ❌     | ❌    | ❌     |

#+begin_src rust
let sys = System::new();
match sys.cpu_load_aggregate() {
    Ok(cpu)=> {
        println!("Measuring CPU load...");
        thread::sleep(Duration::from_secs(1));
        let cpu = cpu.done().unwrap();
        println!("CPU load: {}% user, {}% nice, {}% system, {}% intr, {}% idle ",
                 cpu.user * 100.0, cpu.nice * 100.0, cpu.system * 100.0,
                 cpu.interrupt * 100.0, cpu.idle * 100.0);
    },
    Err(x) => println!("CPU load: error: {}", x)
}
#+end_src
* CPU temperature
| FreeBSD | Linux | OpenBSD | Window | MacOS | NetBSD |
|---------+-------+---------+--------+-------+--------|
| ❌      | ❌    | ❌      | ❌     | ❌    | ❌     |

#+begin_src rust
let sys = System::new();
match sys.cpu_temp() {
    Ok(cpu_temp) => println!("CPU temperature: {}", cpu_temp),
    Err(x) => println!("CPU temperature: {}", x)
}
#+end_src
* Load Average
| FreeBSD | Linux | OpenBSD | Window | MacOS | NetBSD |
|---------+-------+---------+--------+-------+--------|
| ❌      | ❌    | ❌      | ❌     | ❌    | ❌     |

#+begin_src rust
let sys = System::new();
match sys.load_average() {
    Ok(loadavg) => println!("Load average: {} {} {}", loadavg.one, loadavg.five, loadavg.fifteen),
    Err(x) => println!("Load average: error: {}", x)
}
#+end_src

Returns LoadAverage
#+begin_src rust
pub struct LoadAverage {
    pub one: f32,
    pub five: f32,
    pub fifteen: f32,
}
#+end_src
* Memory info
| FreeBSD | Linux | OpenBSD | Window | MacOS | NetBSD |
|---------+-------+---------+--------+-------+--------|
| ❌      | ❌    | ❌      | ❌     | ❌    | ❌     |

#+begin_src rust
let sys = System::new();
match sys.memory() {
    Ok(mem) => println!("Memory: {} used / {} ({} bytes) total ({:?})",
                        saturating_sub_bytes(mem.total, mem.free),
                        mem.total, mem.total.as_u64(), mem.platform_memory),
    Err(x) => println!("Memory: error: {}", x)
}
#+end_src
* Boot Time
| FreeBSD | Linux | OpenBSD | Window | MacOS | NetBSD |
|---------+-------+---------+--------+-------+--------|
| ❌      | ❌    | ❌      | ❌     | ❌    | ❌     |

#+begin_src rust
let sys = System::new();
match sys.boot_time() {
    Ok(boot_time) => println!("Boot time: {}", boot_time),
    Err(x) => println!("Boot time: error: {}", x)
}
#+end_src
* Uptime
| FreeBSD | Linux | OpenBSD | Window | MacOS | NetBSD |
|---------+-------+---------+--------+-------+--------|
| ❌      | ❌    | ❌      | ❌     | ❌    | ❌     |

#+begin_src rust
let sys = System::new();
match sys.uptime() {
    Ok(uptime) => println!("Uptime: {:?}", uptime),
    Err(x) => println!("Uptime: error: {}", x)
}
#+end_src

Returns ~OffsetDateTime~.
* AC adapter status
| FreeBSD | Linux | OpenBSD | Window | MacOS | NetBSD |
|---------+-------+---------+--------+-------+--------|
| ❌      | ❌    | ❌      | ❌     | ❌    | ❌     |

#+begin_src rust
let sys = System::new();
match sys.on_ac_power() {
    Ok(power) => println!("AC adapter status: {}", power),
    Err(x) => println!("AC adapter status: error: {}", x)
}
#+end_src

Returns a ~bool~.
* Battery life
| FreeBSD | Linux | OpenBSD | Window | MacOS | NetBSD |
|---------+-------+---------+--------+-------+--------|
| ❌      | ❌    | ❌      | ❌     | ❌    | ❌     |

#+begin_src rust
let sys = System::new();
match sys.battery_life() {
    Ok(bat) => print!("Battery: {}%, {}h{}m remaining",
                      bat.remaining_capacity * 100.0,
                      bat.remaining_time.as_secs() / 3600,
                      bat.remaining_time.as_secs() % 60),
    Err(x) => print!("Battery: error: {}", x)
}
#+end_src

Returns ~BatteryLife~.
#+begin_src rust
pub struct BatteryLife {
    pub remaining_capacity: f32,
    pub remaining_time: Duration,
}
#+end_src
* Swap
| FreeBSD | Linux | OpenBSD | Window | MacOS | NetBSD |
|---------+-------+---------+--------+-------+--------|
| ❌      | ❌    | ❌      | ❌     | ❌    | ❌     |

#+begin_src rust
let sys = System::new();
match sys.swap() {
    Ok(swap) => println!("Swap: {} used / {} ({} bytes) total ({:?})",
                         saturating_sub_bytes(swap.total, swap.free),
                         swap.total, swap.total.as_u64(), swap.platform_swap),
    Err(x) => println!("Swap: error: {}", x)
}
#+end_src

Returns ~Swap~.
#+begin_src rust
pub struct Swap {
    pub total: ByteSize,
    pub free: ByteSize,
    pub platform_swap: PlatformSwap,
}
pub type PlatformSwap = PlatformMemory;
pub struct PlatformMemory {
    pub load: u32,
    pub total_phys: ByteSize,
    pub avail_phys: ByteSize,
    pub total_pagefile: ByteSize,
    pub avail_pagefile: ByteSize,
    pub total_virt: ByteSize,
    pub avail_virt: ByteSize,
    pub avail_ext: ByteSize,
}
#+end_src
* Disk mounts
| FreeBSD | Linux | OpenBSD | Window | MacOS | NetBSD |
|---------+-------+---------+--------+-------+--------|
| ❌      | ❌    | ❌      | ❌     | ❌    | ❌     |

#+begin_src rust
let sys = System::new();
match sys.mounts() {
    Ok(mounts) => {
        println!("\nMounts:");
        for mount in mounts.iter() {
            println!("{} ---{}---> {} (available {} of {})",
                     mount.fs_mounted_from, mount.fs_type,
                     mount.fs_mounted_on, mount.avail, mount.total);
        }
    }
    Err(x) => println!("\nMounts: error: {}", x)
}

#+end_src
* Disk mount info
| FreeBSD | Linux | OpenBSD | Window | MacOS | NetBSD |
|---------+-------+---------+--------+-------+--------|
| ❌      | ❌    | ❌      | ❌     | ❌    | ❌     |

#+begin_src rust
let sys = System::new();
match sys.mount_at("/") {
    Ok(mount) => {
        println!("Mount at /:");
        println!("{} ---{}---> {} (available {} of {})",
                 mount.fs_mounted_from, mount.fs_type,
                 mount.fs_mounted_on, mount.avail, mount.total);
    }
    Err(x) => println!("\nMount at /: error: {}", x)
}
#+end_src
* Block device statistics
| FreeBSD | Linux | OpenBSD | Window | MacOS | NetBSD |
|---------+-------+---------+--------+-------+--------|
| ❌      | ❌    | ❌      | ❌     | ❌    | ❌     |

#+begin_src rust
let sys = System::new();
match sys.block_device_statistics() {
    Ok(stats) => {
        for blkstats in stats.values() {
            println!("{}: {:?}", blkstats.name, blkstats);
        }
    }
    Err(x) => println!("Block statistics error: {}", x)
}
#+end_src
* Network interfaces and traffic statistics
| FreeBSD | Linux | OpenBSD | Window | MacOS | NetBSD |
|---------+-------+---------+--------+-------+--------|
| ❌      | ❌    | ❌      | ❌     | ❌    | ❌     |

#+begin_src rust
let sys = System::new();
match sys.networks() {
    Ok(netifs) => {
        println!("Network interface statistics:");
        for netif in netifs.values() {
            //Interfaces
            println!("{} ({:?})", netif.name, netif.addrs);
            //Statistics
            println!("{} statistics: ({:?})", netif.name, sys.network_stats(&netif.name));
        }
    }
    Err(x) => println!("Networks: error: {}", x)
}
#+end_src

~networks()~ returns ~Network~.
#+begin_src rust
pub struct Network {
    pub name: String,
    pub addrs: Vec<NetworkAddrs>,
}
pub struct NetworkAddrs {
    pub addr: IpAddr,
    pub netmask: IpAddr,
}
#+end_src

~network_stats()~ returns ~NetworkStats~.
#+begin_src rust
pub struct NetworkStats {
    pub rx_bytes: ByteSize,
    pub tx_bytes: ByteSize,
    pub rx_packets: u64,
    pub tx_packets: u64,
    pub rx_errors: u64,
    pub tx_errors: u64,
}
#+end_src
* Socket info
| FreeBSD | Linux | OpenBSD | Window | MacOS | NetBSD |
|---------+-------+---------+--------+-------+--------|
| ❌      | ❌    | ❌      | ❌     | ❌    | ❌     |

#+begin_src rust
let sys = System::new();
match sys.socket_stats() {
    Ok(stats) => println!("System socket statistics: {:?}", stats),
    Err(x) => println!("System socket statistics: error: {}", x)
}
#+end_src

Returns ~SocketStats~.

#+begin_src rust
pub struct SocketStats {
    pub tcp_sockets_in_use: usize,
    pub tcp_sockets_orphaned: usize,
    pub udp_sockets_in_use: usize,
    pub tcp6_sockets_in_use: usize,
    pub udp6_sockets_in_use: usize,
}
#+end_src
